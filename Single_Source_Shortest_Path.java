import java.util.*;public class Main{    public static void main(String [] args) {        /**         * initial set up         * @param L relationship among vertex and edge, distance         */        Scanner sc = new Scanner(System.in);        int V = sc.nextInt();        int E = sc.nextInt();        int r = sc.nextInt();        Map<Integer,Map<Integer,Integer>> L = new HashMap<>();        for(int i=0;i<E;i++){            int s = sc.nextInt();            int t = sc.nextInt();            int d = sc.nextInt();            /**             * generator of graph             */            if(L.get(s)==null){                Map<Integer,Integer> D = new HashMap<>();                D.put(t,d);                L.put(s,D);            }            else L.get(s).put(t,d);        }        int distance[] = new int[V];        Arrays.fill(distance,999999999);        distance[r] = 0;        distance = Dijkstra(L,r,distance);        for(int i:distance) {            if(i==999999999) System.out.println("INF");            else System.out.println(i);        }    }    public static int [] Dijkstra(Map<Integer,Map<Integer,Integer>> L, int now,int dis[]){        Deque<Integer> nextlist = new ArrayDeque<>();        if(L.get(now)!=null) {            Map<Integer, Integer> ini_list = L.get(now);            for (int i : L.get(now).keySet()) {                nextlist.add(i);                dis[i] = ini_list.get(i);            }        }        while(nextlist.size()>0){            now = nextlist.poll();            if(L.get(now)!=null) {                Map<Integer, Integer> list = L.get(now);                for (int i : list.keySet()) {                    if (dis[i] > dis[now] + list.get(i)) {                        dis[i] = list.get(i) + dis[now];                        nextlist.add(i);                    }                }            }        }        return dis;    }}
import java.util.*;public class Main {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int V = sc.nextInt();        int E = sc.nextInt();        long [][] L = new long[V][V];        long [] D = new long[V];        ArrayList<Graph> Edge = new ArrayList<>();        for(int i=0;i<V;i++) Arrays.fill(L[i],999999999);        for(int i=0;i<E;i++){            int s = sc.nextInt();            int t = sc.nextInt();            long d = sc.nextInt();            L[s][t] = d;            Graph g = new Graph(s,t,d);            Edge.add(g);        }        whole2:for(int k=0;k<V;k++) {            long max = Long.parseLong("99999999999999");            Arrays.fill(D, max);            D[k] = 0;            ArrayList<Integer> Connect_List = new ArrayList<>();            Connect_List.add(k);            Connect_List = DFS(L, k, Connect_List, V);            boolean check = false;            whole:for (int i = 0; i < Connect_List.size(); i++) {                for (Graph g : Edge) {                    if (D[g.t] > D[g.s] + g.d && Connect_List.contains(g.t) && Connect_List.contains(g.s)) {                        D[g.t] = D[g.s] + g.d;                        if (i == Connect_List.size() - 1) {                            check = true;                            break whole;                        }                    }                }            }            if (check){                System.out.println("NEGATIVE CYCLE");                break whole2;            }            else {                if(Connect_List.contains(0)) System.out.print(D[0]);                else System.out.print("INF");                for (int i = 1; i < V; i++) {                    if (Connect_List.contains(i)) System.out.print(" "+D[i]);                    else System.out.print(" INF");                }                System.out.println();            }        }    }    public static ArrayList<Integer> DFS(long [][] L, int now ,ArrayList<Integer> Visit_List,int V) {        for(int i=0;i<V;i++){            if(L[now][i]!=999999999&&!Visit_List.contains(i)){                Visit_List.add(i);                Visit_List = DFS(L,i,Visit_List,V);            }        }        return Visit_List;    }    public static class Graph{        int s,t;        long d;        public Graph(int s,int t,long d){            this.s = s;            this.t = t;            this.d = d;        }    }}
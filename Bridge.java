import java.util.*;public class Main {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        Map<Integer,Node> L = new HashMap<>();        int V = sc.nextInt();        int E = sc.nextInt();        ArrayList<Edge> Edge = new ArrayList<>();        for(int i=0;i<E;i++){            int s = sc.nextInt();            int t = sc.nextInt();            if(s<t)Edge.add(new Edge(s,t));            else Edge.add(new Edge(t,s));            if(L.get(s)==null){                Node n = new Node(V+1,V+1,V+1,new ArrayList<>());                n.Edge.add(t);                L.put(s,n);            }            else L.get(s).Edge.add(t);            if(L.get(t)==null){                Node n = new Node(V+1,V+1,V+1,new ArrayList<>());                n.Edge.add(s);                L.put(t,n);            }            else L.get(t).Edge.add(s);        }        DFS(L);        //for(int i:L.keySet()) System.out.println(i+":"+L.get(i).ord+","+L.get(i).low+","+L.get(i).p);        Collections.sort(Edge, new Comparator<Main.Edge>() {            @Override            public int compare(Main.Edge o1, Main.Edge o2) {                if(o1.s==o2.s) return o1.t<o2.t?-1:1;                else return o1.s<o2.s?-1:1;            }        });        for(Edge i:Edge){            if(L.get(i.s).ord<L.get(i.t).low||L.get(i.t).ord<L.get(i.s).low) System.out.println(i.s+" "+i.t);        }    }    public static void DFS(Map<Integer,Node>L){        ArrayDeque<Integer> stack = new ArrayDeque<>();        stack.push(0);        Set<Integer> set = new HashSet<>();        Map<Integer,Integer> Order = new HashMap<>();        int cnt = 0;        while(stack.size()>0){            int now = stack.pop();            if(!set.contains(now)&&L.get(now)!=null){                set.add(now);                Order.put(cnt,now);                L.get(now).ord = cnt;                L.get(now).low = cnt;                for(int i:L.get(now).Edge){                    if(!set.contains(i)){                        stack.push(i);                        L.get(i).p = now;                    }                }                cnt++;            }        }        for(int k=Order.size()-1;k>=0;k--){            int i= Order.get(k);            if(L.get(i)!=null) {                for (int j : L.get(i).Edge) {                    if (L.get(i).p != j) {                        //System.out.println("("+i+","+j+")="+L.get(i).low+","+L.get(j).low);                        L.get(i).low = Math.min(L.get(i).low, L.get(j).low);                        if(L.get(j).p!=i) L.get(j).low = Math.min(L.get(j).low,L.get(i).low);                    }                }            }        }    }    public static class Node{        int ord,low,p;        ArrayList<Integer> Edge;        public Node(int ord,int low,int p,ArrayList<Integer> Edge){            this.ord = ord;            this.low = low;            this.p = p;            this.Edge = Edge;        }    }    public static class Edge{        int s,t;        public Edge(int s,int t){            this.s = s;            this.t = t;        }    }}
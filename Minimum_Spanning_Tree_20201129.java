import java.util.*;public class Main{    public static void main(String [] args) {        Scanner sc = new Scanner(System.in);        int V = sc.nextInt();        int E = sc.nextInt();        ArrayList<Edge> L = new ArrayList<>();        int [] check = new int[V];        ArrayList<ArrayList<Integer>> Group = new ArrayList<>();        for(int i=0;i<V;i++){            ArrayList<Integer> list = new ArrayList<>();            check[i] = i;            list.add(i);            Group.add(list);        }        for(int i=0;i<E;i++){            Edge e = new Edge(sc.nextInt(),sc.nextInt(),sc.nextInt());            L.add(e);        }        Collections.sort(L, new Comparator<Edge>() {            @Override            public int compare(Edge o1, Edge o2) {                return o1.w<o2.w?-1:1;            }        });        int cost = 0;        for(Edge e:L){            boolean ch = find(check,e.s,e.t);            if(Group.get(check[0]).size()==V) break;            if(!ch){                cost+=e.w;                check = combine(Group,check,check[e.s],check[e.t]);            }        }        System.out.println(cost);    }    public static boolean find(int [] check,int s,int t){         if(check[s]==check[t]) return true;        return false;    }    public static int [] combine(ArrayList<ArrayList<Integer>> G,int [] Check,int s,int t){        ArrayList<Integer> G1 = G.get(s);        ArrayList<Integer> G2 = G.get(t);        if(G1.size()<G2.size()) {            for(int i=0;i<G1.size();i++){                G2.add(G1.get(i));                Check[G1.get(i)]=t;            }        }        else{            for(int i=0;i<G2.size();i++){                G1.add(G2.get(i));                Check[G2.get(i)] = s;            }        }        return Check;    }    public static class Edge{        int s,t,w;        public Edge (int s,int t,int w){            this.s = s;            this.t = t;            this.w = w;        }    }}